/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.brook.api;

import io.swagger.annotations.*;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import com.brook.bean.OperateResult;
import com.brook.bean.UserRegister;

import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-04-19T17:09:30.945+08:00")

@Api(value = "user", tags = { "user", }, description = "the user API")
public interface UserApi {

	@ApiOperation(value = "获取用户信息", notes = "get_user", response = OperateResult.class, tags = { "user", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = OperateResult.class),
			@ApiResponse(code = 500, message = "system error", response = Void.class) })

	@RequestMapping(value = "/user/{user_key}", produces = { "application/json" }, method = RequestMethod.GET)
	default ResponseEntity<OperateResult> getUser(
			@ApiParam(value = "用户key", required = true) @PathVariable("user_key") String userKey) {
		// do some magic!
		return new ResponseEntity<OperateResult>(HttpStatus.OK);
	}

	@ApiOperation(value = "根据邮箱获取用户信息", notes = "get_user_by_email", response = OperateResult.class, tags = { "user", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = OperateResult.class),
			@ApiResponse(code = 500, message = "system error", response = Void.class) })

	@RequestMapping(value = "/user/email", produces = { "application/json" }, method = RequestMethod.GET)
	default ResponseEntity<OperateResult> getUserByEmail(
			@NotNull @ApiParam(value = "用户邮箱", required = true) @RequestParam(value = "user_email", required = true) String userEmail) {
		// do some magic!
		return new ResponseEntity<OperateResult>(HttpStatus.OK);
	}

	@ApiOperation(value = "用户登录", notes = "login", response = OperateResult.class, tags = { "user", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = OperateResult.class),
			@ApiResponse(code = 500, message = "system error", response = Void.class) })

	@RequestMapping(value = "/user/login", produces = { "application/json" }, method = RequestMethod.POST)
	default ResponseEntity<OperateResult> login(
			@NotNull @ApiParam(value = "用户邮箱", required = true) @RequestParam(value = "user_email", required = true) String userEmail,
			@NotNull @ApiParam(value = "用户密码", required = true) @RequestParam(value = "user_pwd", required = true) String userPwd) {
		// do some magic!
		return new ResponseEntity<OperateResult>(HttpStatus.OK);
	}

	@ApiOperation(value = "用户免密登录", notes = "login_authorized", response = OperateResult.class, tags = { "user", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = OperateResult.class),
			@ApiResponse(code = 500, message = "system error", response = Void.class) })

	@RequestMapping(value = "/user/login/authorized", produces = { "application/json" }, method = RequestMethod.POST)
	default ResponseEntity<OperateResult> loginAuthorized(
			@NotNull @ApiParam(value = "用户邮箱", required = true) @RequestParam(value = "user_email", required = true) String userEmail) {
		// do some magic!
		return new ResponseEntity<OperateResult>(HttpStatus.OK);
	}


	@ApiOperation(value = "修改用户邮箱", notes = "modify_user_email", response = OperateResult.class, tags = { "user", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = OperateResult.class),
			@ApiResponse(code = 500, message = "system error", response = Void.class) })

	@RequestMapping(value = "/user/{user_key}/email", produces = { "application/json" }, method = RequestMethod.PUT)
	default ResponseEntity<OperateResult> modifyUserEmail(
			@ApiParam(value = "用户编号", required = true) @PathVariable("user_key") String userKey,
			@NotNull @ApiParam(value = "用户邮箱", required = true) @RequestParam(value = "user_email", required = true) String userEmail,
			@NotNull @ApiParam(value = "用户当前密码", required = true) @RequestParam(value = "current_user_pwd", required = true) String currentUserPwd) {
		// do some magic!
		return new ResponseEntity<OperateResult>(HttpStatus.OK);
	}

	@ApiOperation(value = "修改用户密码", notes = "modify_user_password", response = OperateResult.class, tags = { "user", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = OperateResult.class),
			@ApiResponse(code = 500, message = "system error", response = Void.class) })

	@RequestMapping(value = "/user/{user_key}/password", produces = { "application/json" }, method = RequestMethod.PUT)
	default ResponseEntity<OperateResult> modifyUserPassword(
			@ApiParam(value = "用户编号", required = true) @PathVariable("user_key") String userKey,
			@NotNull @ApiParam(value = "用户当前密码", required = true) @RequestParam(value = "current_user_pwd", required = true) String currentUserPwd,
			@NotNull @ApiParam(value = "用户密码", required = true) @RequestParam(value = "user_pwd", required = true) String userPwd,
			@NotNull @ApiParam(value = "用户确认密码", required = true) @RequestParam(value = "confirm_user_pwd", required = true) String confirmUserPwd) {
		// do some magic!
		return new ResponseEntity<OperateResult>(HttpStatus.OK);
	}

	@ApiOperation(value = "用户激活", notes = "user_activate", response = OperateResult.class, tags = { "user", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = OperateResult.class),
			@ApiResponse(code = 500, message = "system error", response = Void.class) })

	@RequestMapping(value = "/user/activate", produces = { "application/json" }, method = RequestMethod.POST)
	default ResponseEntity<OperateResult> userActivate(
			@NotNull @ApiParam(value = "用户key", required = true) @RequestParam(value = "user_key", required = true) String userKey,
			@NotNull @ApiParam(value = "验证邮箱", required = true) @RequestParam(value = "verify_email", required = true) String verifyEmail) {
		// do some magic!
		return new ResponseEntity<OperateResult>(HttpStatus.OK);
	}

	@ApiOperation(value = "用户邀请确认", notes = "user_invite_confirm", response = OperateResult.class, tags = { "user", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = OperateResult.class),
			@ApiResponse(code = 500, message = "system error", response = Void.class) })

	@RequestMapping(value = "/user/invite_confirm", produces = { "application/json" }, method = RequestMethod.POST)
	default ResponseEntity<OperateResult> userInviteConfirm(
			@NotNull @ApiParam(value = "用户key", required = true) @RequestParam(value = "user_key", required = true) String userKey,
			@NotNull @ApiParam(value = "验证邮箱", required = true) @RequestParam(value = "verify_email", required = true) String verifyEmail,
			@NotNull @ApiParam(value = "组织编号", required = true) @RequestParam(value = "organize_key", required = true) String organizeKey) {
		// do some magic!
		return new ResponseEntity<OperateResult>(HttpStatus.OK);
	}

	ResponseEntity<OperateResult> setUserInfo(@Valid UserRegister user);

}
